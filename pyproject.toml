[tool.poetry]
name = "qualang-tools"
version = "v0.19.2"
description = "The qualang_tools package includes various tools related to QUA programs in Python"
authors = ["Quantum Machines <info@quantum-machines.co>"]
license = "BSD-3-Clause"
packages = [{ include = "qualang_tools" }]
include = []
exclude = ["**/tests/**"]
readme = "README.md"
homepage = "https://github.com/qua-platform/py-qua-tools"

[tool.poetry.dependencies]
python = ">=3.9, <3.13"
matplotlib = "^3.8.0"
numpy = ">=1.26.0, <2"
qm-qua = ">=1.1.7"
scipy = ">=1.11.0"
scikit-learn = ">=1.5.0"
grpclib = "0.4.5"

# interplot
dill = { version = "^0.3.4", optional = true }
pypiwin32 = { version = "^223", optional = true, markers = "sys_platform == 'win32'" }
ipython = { version = "^8.10.0", optional = true }

# configbuilder
pandas = { version = ">=1.2.4", optional = true }
dash = { version = "^2.0.0", optional = true }
dash-html-components = { version = "^2.0.0", optional = true }
dash-core-components = { version = "^2.0.0", optional = true }
dash-bootstrap-components = { version = "^1.6.0", optional = true}
dash-cytoscape = { version = "^0.3.0", optional = true }
dash-table = { version = "^5.0.0", optional = true }
dash-dangerously-set-inner-html = { version = "^0.0.2", optional = true }
docutils = { version = ">=0.14.0 <= 0.21", optional = true }
waitress = { version = "^3.0.1", optional = true }

# datahandler
xarray = { version = "^2023.0.0", optional = true }
netCDF4 = { version = "^1.7.2", optional = true  }

# two-qubit-rb
cirq = { version = "1.2.0", python = ">=3.10", optional = true }
tqdm = { version = "^4.67.1", optional = true  }

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
black = "^24.3"
poethepoet = "^0.18.0"
flake8 = "^5.0.4"
setuptools = "^69.0.2"

[tool.poetry.extras]
interplot = ["dill", "pypiwin32", "ipython"]
configbuilder = [
    "pandas",
    "dash",
    "dash-html-components",
    "dash-core-components",
    "dash-bootstrap-components",
    "dash-cytoscape",
    "dash-table",
    "dash-dangerously-set-inner-html",
    "docutils",
    "waitress",
]
datahandler = ["xarray", "netcdf4"]
two-qubit-rb = ["xarray", "cirq", "tqdm"]

[tool.black]
line-length = 120
exclude = "qualang_tools/bakery/randomized_benchmark_c1.py"

[tool.poe.tasks]
format = "black qualang_tools"
check-format = "black --check qualang_tools"
lint = "flake8 qualang_tools"
test = "pytest tests"
test_server = "pytest tests_against_server"

[tool.poe.tasks.check]
sequence = ["check-format", "lint", "test"]
help = "Perform all check possible on the code"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
