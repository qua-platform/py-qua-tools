[tool.poetry]
name = "qualang-tools"
version = "v0.17.2"
description = "The qualang_tools package includes various tools related to QUA programs in Python"
license = "BSD-3-Clause"
authors = [
      "QM <qua-libs@quantum-machines.co>",
]
packages = [
    { include = "qualang_tools" }
]
include = [
]
exclude = [
    "**/tests/**",
]
readme = "README.md"
homepage = "https://github.com/qua-platform/py-qua-tools"

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
matplotlib = "^3.4.2"
numpy = "^1.17.0"
qm-qua = "1.1.7"
scipy = "^1.7.1"
pandas = { version = ">=1.2.4", optional = true }
dash = { version = "^2.0.0", optional = true }
dash-html-components = { version = "^2.0.0", optional = true }
dash-core-components = { version = "^2.0.0", optional = true }
dash-bootstrap-components = { version = "^1.0.0", optional = true }
dash-cytoscape = { version = "^0.3.0", optional = true }
dash-table = { version = "^5.0.0", optional = true }
dash-dangerously-set-inner-html = { version = "^0.0.2", optional = true }
docutils = { version = ">=0.14.0", optional = true }
waitress = { version = "^2.0.0", optional = true }
dill = { version = "^0.3.4", optional = true }
pypiwin32 = { version = "^223", optional = true }
ipython = { version = "^7.31.1", optional = true }
xarray = { version = "^2023.0.0", optional = true }
scikit-learn = "^1.0.2"
grpclib = "0.4.5"

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
black = "^22.3"
poethepoet = "^0.11.0"
flake8 = "^4.0.1"
setuptools = "^69.0.2"

[tool.poetry.extras]
interplot = ["dill", "pypiwin32", "ipython"]
configbuilder = ["pandas", "dash", "dash-html-components", "dash-core-components", "dash-bootstrap-components", "dash-cytoscape", "dash-table", "dash-dangerously-set-inner-html", "docutils", "waitress"]
datahandler = ["xarray"]

[tool.black]
line-length = 120
exclude = "qualang_tools/bakery/randomized_benchmark_c1.py"

[tool.poe.tasks]
format = "black qualang_tools"
check-format = "black --check qualang_tools"
lint = "flake8 qualang_tools"
test = "pytest tests"
test_server = "pytest tests_against_server"

[tool.poe.tasks.check]
sequence = ["check-format", "lint", "test"]
help = "Perform all check possible on the code"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
